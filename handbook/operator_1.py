x = 10
y = 5
# арифметические операции
print(f"{x} + {y} = {x+y}")  #  сложение
print(f"{x} - {y} = {x-y}")  # вычитание
print(f"{x} * {y} = {x*y}")  # умножение
print(f"{x} / {y} = {x/y}")  # деление
print(f"{x} // {y} = {x//y}")  # целочисленное деление
print(f"{x} % {y} = {x%y}")  # остаток от деления
print(f"{x} ** {y} = {x**y}")  # возведение в степень

# операции сравнения
print(f"{x} == {y} = {x == y}")  # равенство
print(f"{x}!= {y} = {x != y}")  # неравенство
print(f"{x} > {y} = {x > y}")  # больше
print(f"{x} < {y} = {x < y}")  # меньше
print(f"{x} >= {y} = {x >= y}")  # больше или равно
print(f"{x} <= {y} = {x <= y}")  # меньше или равно

# Булевы операции
x = 5
y = 2
z = 0
print(f"{x} > {y} and {x} > {z}= {x > y and x > z}")
print(f"{x} > {y} or {x} < {z}= {x > y or x < z}")
print(f"not {x} > {y} = {not x > y}")

# Побитовые операции
# Побитовое И (AND)
a = 0b1101  # Двоичное представление числа 13
b = 0b1011  # Двоичное представление числа 11
c = a & b  # Результат будет 0b1001, что в десятичной системе равно 9
print(f"Побитовое И: {c}")

# Побитовое ИЛИ (OR)
c = a | b  # Результат будет 0b1111, что в десятичной системе равно 15
print(f"Побитовое ИЛИ: {c}")

# Побитовое ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR)
c = a ^ b  # Результат будет 0b0110, что в десятичной системе равно 6
print(f"Побитовое ИСКЛЮЧАЮЩЕЕ ИЛИ: {c}")

# Побитовое НЕ (NOT)
c = ~a  # Результат будет инвертированными битами числа a
print(f"Побитовое НЕ: {c}")

# Побитовый сдвиг влево
c = a << 2  # Число a сдвигается на 2 бита влево, это эквивалентно умножению на 2^2
print(f"Побитовый сдвиг влево: {c}")

# Побитовый сдвиг вправо
c = a >> 2  # Число a сдвигается на 2 бита вправо, это эквивалентно делению на 2^2
print(f"Побитовый сдвиг вправо: {c}")

# Операторы "is" и "in"
x = [1, 2, 3]
y = [1, 2, 3]
print(
    f"{x} is {y} = {x is y}"
)  # Оператор is используется для проверки, являются ли два объекта одним и тем же объектом в памяти.
print(f"{x} == {y} = {x == y}")  #
print(
    f"{2} in {y} = {2 in y}"
)  # Оператор in используется для проверки, находится ли элемент в последовательности. Если элемент не найден, то возвращается False.
print(f"{5} in {y} = {5 in y}")  #

# Тернарный оператор
z, x = 10, 5  #
max_value = z if z > x else x  # Максимальное значение
print(f"Максимальное значение: {max_value}")

# Условие
число = 10
# Условная проверка числа
if число > 5:  # Если число больше пяти
    print("Число больше пяти.")
elif число == 5:
    print("Число равно пяти.")
else:
    print("Число меньше пяти.")


# Определяем функцию с использованием оператора сопоставления с образцом
# def match_example(value):
#     match value:
#         case "a":
#             print("Value is 'a'")
#         case "b":
#             print("Value is 'b'")
#         case _:
#             print("Value is something else")


# # Вызываем функцию с различными значениями
# match_example("a")  # Выведет: Value is 'a'
# match_example("b")  # Выведет: Value is 'b'
# match_example("c")  # Выведет: Value is something else

# None
a = None
if a is None:
    print("a is None")


def function():
    # Здесь находится код, который нужно выполнить, если имя модуля - 'main'
    print("Это функция, которая будет выполнена, если имя модуля - 'main'.")


# Определение других функций и классов...

if __name__ == "__main__":
    # Этот блок кода будет выполнен, если файл вызван непосредственно, а не импортирован
    function()
